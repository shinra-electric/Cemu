name: Build Cemu

on:
  push:
    branches:
      - main
      - build-test
  workflow_call:
    inputs:
      next_version_major:
        required: false
        type: string
      next_version_minor:
        required: false
        type: string
      next_version_patch:
        required: false
        type: string

env:
  VCPKG_ROOT: "${{github.workspace}}/dependencies/vcpkg"
  VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'

jobs:
  build-macos:
    strategy:
      matrix:
        include:
            - runner: macos-14
              suffix: arm64
            - runner: macos-14
              suffix: x86_64
    runs-on: ${{ matrix.runner}}

    steps:
    - name: "Checkout repo"
      uses: actions/checkout@v4
      with:
        submodules: "recursive"

    - name: "Select Xcode 16.2"
      run: sudo xcode-select -s /Applications/Xcode_16.2.app/Contents/Developer

    - name: "Verify Xcode Version"
      run: xcodebuild -version
        
    - name: Setup release mode parameters
      run: |
        echo "BUILD_MODE=release" >> $GITHUB_ENV
        echo "BUILD_FLAGS=" >> $GITHUB_ENV
        echo "Build mode is release"

    - name: Setup build flags for version
      if: ${{ inputs.next_version_major != '' }}
      run: |
        echo "[INFO] Version ${{ inputs.next_version_major }}.${{ inputs.next_version_minor }}"
        echo "BUILD_FLAGS=${{ env.BUILD_FLAGS }} \
        -DEMULATOR_VERSION_MAJOR=${{ inputs.next_version_major }} \
        -DEMULATOR_VERSION_MINOR=${{ inputs.next_version_minor }} \
        -DEMULATOR_VERSION_PATCH=${{ inputs.next_version_patch }}" >> $GITHUB_ENV
        
    - name: "Install system dependencies"
      run: |
        brew update
        brew install nasm automake libtool

    - name: "Install molten-vk"
      run: |
        curl -L -O https://github.com/KhronosGroup/MoltenVK/releases/download/v1.3.0/MoltenVK-macos.tar
        tar xf MoltenVK-macos.tar
        sudo mkdir -p /usr/local/lib
        sudo cp MoltenVK/MoltenVK/dynamic/dylib/macOS/libMoltenVK.dylib /usr/local/lib

    - name: "Setup cmake"
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.29.0'

    - name: "Bootstrap vcpkg"
      run: |
        bash ./dependencies/vcpkg/bootstrap-vcpkg.sh
        
    - name: 'Setup NuGet Credentials for vcpkg'
      shell: 'bash'
      run: |
        mono `./dependencies/vcpkg/vcpkg fetch nuget | tail -n 1` \
        sources add \
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
        -storepasswordincleartext \
        -name "GitHub" \
        -username "${{ github.repository_owner }}" \
        -password "${{ secrets.GITHUB_TOKEN }}"
        mono `./dependencies/vcpkg/vcpkg fetch nuget | tail -n 1` \
        setapikey "${{ secrets.GITHUB_TOKEN }}" \
        -source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        
    - name: "CMake configuration"
      run: |
        mkdir build
        cd build
        cmake .. ${{ env.BUILD_FLAGS }} \
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_MODE }} \
        -DCMAKE_OSX_ARCHITECTURES=${{ matrix.suffix }} \
        -DMACOS_BUNDLE=ON \
        -G Ninja
        
    - name: "Build"
      run: |
        cmake --build build

    - name: "Move artifact"
      run: |
        mv bin/Cemu_release.app bin/Cemu_${{ matrix.suffix }}.app
        mv bin/Cemu_${{ matrix.suffix }}.app/Contents/MacOS/Cemu_release bin/Cemu_${{ matrix.suffix }}.app/Contents/MacOS/Cemu_${{ matrix.suffix }}
        sed -i '' 's/Cemu_release/Cemu_${{ matrix.suffix }}/g' bin/Cemu_${{ matrix.suffix }}.app/Contents/Info.plist
        chmod a+x bin/Cemu_${{ matrix.suffix }}.app/Contents/MacOS/{Cemu_${{ matrix.suffix }},update.sh}
        install_name_tool -change @rpath/libusb-1.0.0.dylib @loader_path/../Frameworks/libusb-1.0.0.dylib bin/Cemu_${{ matrix.suffix }}.app/Contents/MacOS/Cemu_${{ matrix.suffix }}
        codesign --force --deep --sign - bin/Cemu_${{ matrix.suffix }}.app
    
    - name: Prepare artifacts
      run: |
        mkdir bin/Cemu_app_${{ matrix.suffix }}
        mv bin/Cemu_${{ matrix.suffix }}.app bin/Cemu_app_${{ matrix.suffix }}/Cemu_${{ matrix.suffix }}.app
        ln -s /Applications bin/Cemu_app_${{ matrix.suffix }}/Applications
        hdiutil create -volname "Cemu" -srcfolder "bin/Cemu_app_${{ matrix.suffix }}" "Cemu_${{ matrix.suffix }}"
  
    - name: Upload ${{ matrix.suffix }} artifact
      uses: actions/upload-artifact@v4
      with:
        name: Cemu-macOS-${{ matrix.suffix }}
        path: ./bin/Cemu_${{ matrix.suffix }}.dmg
#   
#   universal-binary:
#     runs-on: macos-15
#     
#     steps:
#       
#     - name: Download artifacts
#       uses: actions/download-artifact@v4
#       with:
#         name: Cemu-macOS-x86_64
#         name: Cemu-macOS-arm64
# 
#     - name: "Create Universal binary"
#       run: |
#         rm bin/Cemu_Metal.app/Contents/MacOS/Cemu_release
#         lipo -create -output bin/Cemu_Metal.app/Contents/MacOS/Cemu_Metal \
#         bin/Cemu_Metal_x64.app/Contents/MacOS/Cemu_Metal_x64 \
#         bin/Cemu_Metal_arm64.app/Contents/MacOS/Cemu_Metal_arm64
#         rm bin/Cemu_Metal.app/Contents/Frameworks/libusb-1.0.0.dylib
#         lipo -create -output bin/Cemu_Metal.app/Contents/Frameworks/libusb-1.0.0.dylib \
#         bin/Cemu_Metal_x64.app/Contents/Frameworks/libusb-1.0.0.dylib \
#         bin/Cemu_Metal_arm64.app/Contents/Frameworks/libusb-1.0.0.dylib
#         sed -i '' 's/Cemu_release/Cemu_Metal/g' bin/Cemu_Metal.app/Contents/Info.plist
#         chmod a+x bin/Cemu_Metal.app/Contents/MacOS/{Cemu_Metal,update.sh}
#         codesign --force --deep --sign - bin/Cemu_Metal.app
# 
#     - name: Prepare artifacts
#       run: |
#         mkdir bin/Cemu_app_x64
#         mv bin/Cemu_Metal_x64.app bin/Cemu_app_x64/Cemu_Metal_x64.app
#         mkdir bin/Cemu_app_arm64
#         mv bin/Cemu_Metal_arm64.app bin/Cemu_app_arm64/Cemu_Metal_arm64.app
#         mkdir bin/Cemu_app
#         mv bin/Cemu_Metal.app bin/Cemu_app/Cemu_Metal.app
#         ln -s /Applications bin/Cemu_app_x64/Applications
#         ln -s /Applications bin/Cemu_app_arm64/Applications
#         ln -s /Applications bin/Cemu_app/Applications
#         hdiutil create ./bin/tmp.dmg -ov -volname "Cemu" -fs HFS+ -srcfolder "./bin/Cemu_app_x64"
#         hdiutil convert ./bin/tmp.dmg -format UDZO -o bin/Cemu_x64.dmg
#         rm bin/tmp.dmg
#         hdiutil create ./bin/tmp.dmg -ov -volname "Cemu" -fs HFS+ -srcfolder "./bin/Cemu_app_arm64"
#         hdiutil convert ./bin/tmp.dmg -format UDZO -o bin/Cemu_arm64.dmg
#         rm bin/tmp.dmg
#         hdiutil create ./bin/tmp.dmg -ov -volname "Cemu" -fs HFS+ -srcfolder "./bin/Cemu_app"
#         hdiutil convert ./bin/tmp.dmg -format UDZO -o bin/Cemu_Universal.dmg
#         rm bin/tmp.dmg
#               
#     - name: Upload x64 artifact
#       uses: actions/upload-artifact@v4
#       with:
#         name: cemu-bin-macos-x64
#         path: ./bin/Cemu_x64.dmg
# 
#     - name: Upload arm64 artifact
#       uses: actions/upload-artifact@v4
#       with:
#         name: cemu-bin-macos-arm64
#         path: ./bin/Cemu_arm64.dmg
# 
#     - name: Upload universal artifact
#       uses: actions/upload-artifact@v4
#       with:
#         name: cemu-bin-macos-universal
#         path: ./bin/Cemu_Universal.dmg
